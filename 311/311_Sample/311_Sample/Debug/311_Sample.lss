
311_Sample.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000d38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cc4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  00800100  00800100  00000d38  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005d1  00000000  00000000  00000e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002d8  00000000  00000000  0000145d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000415  00000000  00000000  00001735  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000340  00000000  00000000  00001b4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c8  00000000  00000000  00001e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000065d  00000000  00000000  00002154  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000027b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1d c0       	rjmp	.+58     	; 0x3c <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	6e c0       	rjmp	.+220    	; 0xe2 <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	b0 c0       	rjmp	.+352    	; 0x17c <__vector_13>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	ca c1       	rjmp	.+916    	; 0x3b6 <__vector_16>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>
  26:	a3 c2       	rjmp	.+1350   	; 0x56e <__vector_19>
  28:	19 c0       	rjmp	.+50     	; 0x5c <__bad_interrupt>
  2a:	18 c0       	rjmp	.+48     	; 0x5c <__bad_interrupt>
  2c:	97 c1       	rjmp	.+814    	; 0x35c <__vector_22>
  2e:	16 c0       	rjmp	.+44     	; 0x5c <__bad_interrupt>
  30:	6e c1       	rjmp	.+732    	; 0x30e <__vector_24>
  32:	14 c0       	rjmp	.+40     	; 0x5c <__bad_interrupt>
  34:	13 c0       	rjmp	.+38     	; 0x5c <__bad_interrupt>
  36:	12 c0       	rjmp	.+36     	; 0x5c <__bad_interrupt>
  38:	11 c0       	rjmp	.+34     	; 0x5c <__bad_interrupt>
  3a:	10 c0       	rjmp	.+32     	; 0x5c <__bad_interrupt>

0000003c <__ctors_end>:
  3c:	11 24       	eor	r1, r1
  3e:	1f be       	out	0x3f, r1	; 63
  40:	cf ef       	ldi	r28, 0xFF	; 255
  42:	d2 e0       	ldi	r29, 0x02	; 2
  44:	de bf       	out	0x3e, r29	; 62
  46:	cd bf       	out	0x3d, r28	; 61

00000048 <__do_clear_bss>:
  48:	21 e0       	ldi	r18, 0x01	; 1
  4a:	a0 e0       	ldi	r26, 0x00	; 0
  4c:	b1 e0       	ldi	r27, 0x01	; 1
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 32       	cpi	r26, 0x20	; 32
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	a9 d2       	rcall	.+1362   	; 0x5ac <main>
  5a:	32 c6       	rjmp	.+3172   	; 0xcc0 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <cal_adc>:
	 ADMUXA = 11;
	 //ADCSRA |= (1<<ADSC);
	 ADC = 0;
 }

 int cal_adc(unsigned int adc) {
  5e:	cf 93       	push	r28
  60:	df 93       	push	r29
  62:	cd b7       	in	r28, 0x3d	; 61
  64:	de b7       	in	r29, 0x3e	; 62
  66:	28 97       	sbiw	r28, 0x08	; 8
  68:	0f b6       	in	r0, 0x3f	; 63
  6a:	f8 94       	cli
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	0f be       	out	0x3f, r0	; 63
  70:	cd bf       	out	0x3d, r28	; 61
  72:	98 87       	std	Y+8, r25	; 0x08
  74:	8f 83       	std	Y+7, r24	; 0x07
	 //conversion from adc to input signal
	 double stepsize = (double)5/(double)1024;
  76:	80 e0       	ldi	r24, 0x00	; 0
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	a0 ea       	ldi	r26, 0xA0	; 160
  7c:	bb e3       	ldi	r27, 0x3B	; 59
  7e:	89 83       	std	Y+1, r24	; 0x01
  80:	9a 83       	std	Y+2, r25	; 0x02
  82:	ab 83       	std	Y+3, r26	; 0x03
  84:	bc 83       	std	Y+4, r27	; 0x04
	 int Vin = stepsize * adc * 100;
  86:	8f 81       	ldd	r24, Y+7	; 0x07
  88:	98 85       	ldd	r25, Y+8	; 0x08
  8a:	cc 01       	movw	r24, r24
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b0 e0       	ldi	r27, 0x00	; 0
  90:	bc 01       	movw	r22, r24
  92:	cd 01       	movw	r24, r26
  94:	b9 d4       	rcall	.+2418   	; 0xa08 <__floatunsisf>
  96:	dc 01       	movw	r26, r24
  98:	cb 01       	movw	r24, r22
  9a:	29 81       	ldd	r18, Y+1	; 0x01
  9c:	3a 81       	ldd	r19, Y+2	; 0x02
  9e:	4b 81       	ldd	r20, Y+3	; 0x03
  a0:	5c 81       	ldd	r21, Y+4	; 0x04
  a2:	bc 01       	movw	r22, r24
  a4:	cd 01       	movw	r24, r26
  a6:	3e d5       	rcall	.+2684   	; 0xb24 <__mulsf3>
  a8:	dc 01       	movw	r26, r24
  aa:	cb 01       	movw	r24, r22
  ac:	20 e0       	ldi	r18, 0x00	; 0
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	48 ec       	ldi	r20, 0xC8	; 200
  b2:	52 e4       	ldi	r21, 0x42	; 66
  b4:	bc 01       	movw	r22, r24
  b6:	cd 01       	movw	r24, r26
  b8:	35 d5       	rcall	.+2666   	; 0xb24 <__mulsf3>
  ba:	dc 01       	movw	r26, r24
  bc:	cb 01       	movw	r24, r22
  be:	bc 01       	movw	r22, r24
  c0:	cd 01       	movw	r24, r26
  c2:	71 d4       	rcall	.+2274   	; 0x9a6 <__fixsfsi>
  c4:	dc 01       	movw	r26, r24
  c6:	cb 01       	movw	r24, r22
  c8:	9e 83       	std	Y+6, r25	; 0x06
  ca:	8d 83       	std	Y+5, r24	; 0x05

	 return Vin; //return Vin
  cc:	8d 81       	ldd	r24, Y+5	; 0x05
  ce:	9e 81       	ldd	r25, Y+6	; 0x06
 }
  d0:	28 96       	adiw	r28, 0x08	; 8
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	f8 94       	cli
  d6:	de bf       	out	0x3e, r29	; 62
  d8:	0f be       	out	0x3f, r0	; 63
  da:	cd bf       	out	0x3d, r28	; 61
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <__vector_2>:
volatile uint16_t pre_reading = 0;
volatile double power = 0;
volatile double avr_power = 0;


ISR(PCINT0_vect){
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	00 90 5f 00 	lds	r0, 0x005F
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	2f 93       	push	r18
  f0:	3f 93       	push	r19
  f2:	8f 93       	push	r24
  f4:	9f 93       	push	r25
  f6:	ef 93       	push	r30
  f8:	ff 93       	push	r31
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
	if (PINA & (1<<PINA0) ) {
 102:	89 e3       	ldi	r24, 0x39	; 57
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	fc 01       	movw	r30, r24
 108:	80 81       	ld	r24, Z
 10a:	88 2f       	mov	r24, r24
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	81 70       	andi	r24, 0x01	; 1
 110:	99 27       	eor	r25, r25
 112:	89 2b       	or	r24, r25
 114:	99 f0       	breq	.+38     	; 0x13c <__vector_2+0x5a>
		TOCPMCOE |= (1<<TOCC4OE);
 116:	86 e6       	ldi	r24, 0x66	; 102
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	26 e6       	ldi	r18, 0x66	; 102
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	f9 01       	movw	r30, r18
 120:	20 81       	ld	r18, Z
 122:	20 61       	ori	r18, 0x10	; 16
 124:	fc 01       	movw	r30, r24
 126:	20 83       	st	Z, r18
		TOCPMCOE &= ~(1<<TOCC2OE);
 128:	86 e6       	ldi	r24, 0x66	; 102
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	26 e6       	ldi	r18, 0x66	; 102
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	f9 01       	movw	r30, r18
 132:	20 81       	ld	r18, Z
 134:	2b 7f       	andi	r18, 0xFB	; 251
 136:	fc 01       	movw	r30, r24
 138:	20 83       	st	Z, r18
 13a:	12 c0       	rjmp	.+36     	; 0x160 <__vector_2+0x7e>
	}
	else {
		TOCPMCOE |= (1<<TOCC2OE);
 13c:	86 e6       	ldi	r24, 0x66	; 102
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	26 e6       	ldi	r18, 0x66	; 102
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	f9 01       	movw	r30, r18
 146:	20 81       	ld	r18, Z
 148:	24 60       	ori	r18, 0x04	; 4
 14a:	fc 01       	movw	r30, r24
 14c:	20 83       	st	Z, r18
		TOCPMCOE &= ~(1<<TOCC4OE);
 14e:	86 e6       	ldi	r24, 0x66	; 102
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	26 e6       	ldi	r18, 0x66	; 102
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	f9 01       	movw	r30, r18
 158:	20 81       	ld	r18, Z
 15a:	2f 7e       	andi	r18, 0xEF	; 239
 15c:	fc 01       	movw	r30, r24
 15e:	20 83       	st	Z, r18
	}
}
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	ff 91       	pop	r31
 166:	ef 91       	pop	r30
 168:	9f 91       	pop	r25
 16a:	8f 91       	pop	r24
 16c:	3f 91       	pop	r19
 16e:	2f 91       	pop	r18
 170:	0f 90       	pop	r0
 172:	00 92 5f 00 	sts	0x005F, r0
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <__vector_13>:


ISR(ADC_vect){
 17c:	1f 92       	push	r1
 17e:	0f 92       	push	r0
 180:	00 90 5f 00 	lds	r0, 0x005F
 184:	0f 92       	push	r0
 186:	11 24       	eor	r1, r1
 188:	2f 93       	push	r18
 18a:	3f 93       	push	r19
 18c:	4f 93       	push	r20
 18e:	5f 93       	push	r21
 190:	6f 93       	push	r22
 192:	7f 93       	push	r23
 194:	8f 93       	push	r24
 196:	9f 93       	push	r25
 198:	af 93       	push	r26
 19a:	bf 93       	push	r27
 19c:	ef 93       	push	r30
 19e:	ff 93       	push	r31
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	00 d0       	rcall	.+0      	; 0x1a6 <__vector_13+0x2a>
 1a6:	00 d0       	rcall	.+0      	; 0x1a8 <__vector_13+0x2c>
 1a8:	cd b7       	in	r28, 0x3d	; 61
 1aa:	de b7       	in	r29, 0x3e	; 62

	if(count < 100){
 1ac:	80 91 0c 01 	lds	r24, 0x010C
 1b0:	90 91 0d 01 	lds	r25, 0x010D
 1b4:	84 36       	cpi	r24, 0x64	; 100
 1b6:	91 05       	cpc	r25, r1
 1b8:	0c f0       	brlt	.+2      	; 0x1bc <__vector_13+0x40>
 1ba:	64 c0       	rjmp	.+200    	; 0x284 <__vector_13+0x108>
		cur_reading = cal_adc(ADC);
 1bc:	86 e2       	ldi	r24, 0x26	; 38
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	fc 01       	movw	r30, r24
 1c2:	80 81       	ld	r24, Z
 1c4:	91 81       	ldd	r25, Z+1	; 0x01
 1c6:	4b df       	rcall	.-362    	; 0x5e <cal_adc>
 1c8:	90 93 11 01 	sts	0x0111, r25
 1cc:	80 93 10 01 	sts	0x0110, r24

		//calculate power
		double temp_power = pre_reading * cur_reading;
 1d0:	80 91 12 01 	lds	r24, 0x0112
 1d4:	90 91 13 01 	lds	r25, 0x0113
 1d8:	20 91 10 01 	lds	r18, 0x0110
 1dc:	30 91 11 01 	lds	r19, 0x0111
 1e0:	b9 01       	movw	r22, r18
 1e2:	0b d5       	rcall	.+2582   	; 0xbfa <__mulhi3>
 1e4:	cc 01       	movw	r24, r24
 1e6:	a0 e0       	ldi	r26, 0x00	; 0
 1e8:	b0 e0       	ldi	r27, 0x00	; 0
 1ea:	bc 01       	movw	r22, r24
 1ec:	cd 01       	movw	r24, r26
 1ee:	0c d4       	rcall	.+2072   	; 0xa08 <__floatunsisf>
 1f0:	dc 01       	movw	r26, r24
 1f2:	cb 01       	movw	r24, r22
 1f4:	89 83       	std	Y+1, r24	; 0x01
 1f6:	9a 83       	std	Y+2, r25	; 0x02
 1f8:	ab 83       	std	Y+3, r26	; 0x03
 1fa:	bc 83       	std	Y+4, r27	; 0x04
		temp_power = temp_power / 10000;
 1fc:	20 e0       	ldi	r18, 0x00	; 0
 1fe:	30 e4       	ldi	r19, 0x40	; 64
 200:	4c e1       	ldi	r20, 0x1C	; 28
 202:	56 e4       	ldi	r21, 0x46	; 70
 204:	69 81       	ldd	r22, Y+1	; 0x01
 206:	7a 81       	ldd	r23, Y+2	; 0x02
 208:	8b 81       	ldd	r24, Y+3	; 0x03
 20a:	9c 81       	ldd	r25, Y+4	; 0x04
 20c:	64 d3       	rcall	.+1736   	; 0x8d6 <__divsf3>
 20e:	dc 01       	movw	r26, r24
 210:	cb 01       	movw	r24, r22
 212:	89 83       	std	Y+1, r24	; 0x01
 214:	9a 83       	std	Y+2, r25	; 0x02
 216:	ab 83       	std	Y+3, r26	; 0x03
 218:	bc 83       	std	Y+4, r27	; 0x04
		power = power + temp_power;
 21a:	80 91 14 01 	lds	r24, 0x0114
 21e:	90 91 15 01 	lds	r25, 0x0115
 222:	a0 91 16 01 	lds	r26, 0x0116
 226:	b0 91 17 01 	lds	r27, 0x0117
 22a:	29 81       	ldd	r18, Y+1	; 0x01
 22c:	3a 81       	ldd	r19, Y+2	; 0x02
 22e:	4b 81       	ldd	r20, Y+3	; 0x03
 230:	5c 81       	ldd	r21, Y+4	; 0x04
 232:	bc 01       	movw	r22, r24
 234:	cd 01       	movw	r24, r26
 236:	eb d2       	rcall	.+1494   	; 0x80e <__addsf3>
 238:	dc 01       	movw	r26, r24
 23a:	cb 01       	movw	r24, r22
 23c:	80 93 14 01 	sts	0x0114, r24
 240:	90 93 15 01 	sts	0x0115, r25
 244:	a0 93 16 01 	sts	0x0116, r26
 248:	b0 93 17 01 	sts	0x0117, r27

		//Increment the number of power values and switch channel
		count++;
 24c:	80 91 0c 01 	lds	r24, 0x010C
 250:	90 91 0d 01 	lds	r25, 0x010D
 254:	01 96       	adiw	r24, 0x01	; 1
 256:	90 93 0d 01 	sts	0x010D, r25
 25a:	80 93 0c 01 	sts	0x010C, r24
		ADMUXA ^= (1<<0);
 25e:	89 e2       	ldi	r24, 0x29	; 41
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	29 e2       	ldi	r18, 0x29	; 41
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	f9 01       	movw	r30, r18
 268:	30 81       	ld	r19, Z
 26a:	21 e0       	ldi	r18, 0x01	; 1
 26c:	23 27       	eor	r18, r19
 26e:	fc 01       	movw	r30, r24
 270:	20 83       	st	Z, r18

		//Update previous reading to the current reading
		pre_reading = cur_reading ;
 272:	80 91 10 01 	lds	r24, 0x0110
 276:	90 91 11 01 	lds	r25, 0x0111
 27a:	90 93 13 01 	sts	0x0113, r25
 27e:	80 93 12 01 	sts	0x0112, r24
 282:	2d c0       	rjmp	.+90     	; 0x2de <__vector_13+0x162>

	}else{
		
		//take the average value
		avr_power = power/99;
 284:	80 91 14 01 	lds	r24, 0x0114
 288:	90 91 15 01 	lds	r25, 0x0115
 28c:	a0 91 16 01 	lds	r26, 0x0116
 290:	b0 91 17 01 	lds	r27, 0x0117
 294:	20 e0       	ldi	r18, 0x00	; 0
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	46 ec       	ldi	r20, 0xC6	; 198
 29a:	52 e4       	ldi	r21, 0x42	; 66
 29c:	bc 01       	movw	r22, r24
 29e:	cd 01       	movw	r24, r26
 2a0:	1a d3       	rcall	.+1588   	; 0x8d6 <__divsf3>
 2a2:	dc 01       	movw	r26, r24
 2a4:	cb 01       	movw	r24, r22
 2a6:	80 93 18 01 	sts	0x0118, r24
 2aa:	90 93 19 01 	sts	0x0119, r25
 2ae:	a0 93 1a 01 	sts	0x011A, r26
 2b2:	b0 93 1b 01 	sts	0x011B, r27
		uart_transmit('|');
		uart_transmit(' ');
		*/

		//Reinitialize everything to start another power reading
		pre_reading = 0;
 2b6:	10 92 13 01 	sts	0x0113, r1
 2ba:	10 92 12 01 	sts	0x0112, r1
		cur_reading  = 0;
 2be:	10 92 11 01 	sts	0x0111, r1
 2c2:	10 92 10 01 	sts	0x0110, r1
		count = 0;
 2c6:	10 92 0d 01 	sts	0x010D, r1
 2ca:	10 92 0c 01 	sts	0x010C, r1
		power = 0;
 2ce:	10 92 14 01 	sts	0x0114, r1
 2d2:	10 92 15 01 	sts	0x0115, r1
 2d6:	10 92 16 01 	sts	0x0116, r1
 2da:	10 92 17 01 	sts	0x0117, r1
	}
}
 2de:	0f 90       	pop	r0
 2e0:	0f 90       	pop	r0
 2e2:	0f 90       	pop	r0
 2e4:	0f 90       	pop	r0
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	ff 91       	pop	r31
 2ec:	ef 91       	pop	r30
 2ee:	bf 91       	pop	r27
 2f0:	af 91       	pop	r26
 2f2:	9f 91       	pop	r25
 2f4:	8f 91       	pop	r24
 2f6:	7f 91       	pop	r23
 2f8:	6f 91       	pop	r22
 2fa:	5f 91       	pop	r21
 2fc:	4f 91       	pop	r20
 2fe:	3f 91       	pop	r19
 300:	2f 91       	pop	r18
 302:	0f 90       	pop	r0
 304:	00 92 5f 00 	sts	0x005F, r0
 308:	0f 90       	pop	r0
 30a:	1f 90       	pop	r1
 30c:	18 95       	reti

0000030e <__vector_24>:


ISR(USART0_TX_vect){
 30e:	1f 92       	push	r1
 310:	0f 92       	push	r0
 312:	00 90 5f 00 	lds	r0, 0x005F
 316:	0f 92       	push	r0
 318:	11 24       	eor	r1, r1
 31a:	2f 93       	push	r18
 31c:	3f 93       	push	r19
 31e:	8f 93       	push	r24
 320:	9f 93       	push	r25
 322:	ef 93       	push	r30
 324:	ff 93       	push	r31
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	cd b7       	in	r28, 0x3d	; 61
 32c:	de b7       	in	r29, 0x3e	; 62
	UCSR0B |= (1<<RXEN0);
 32e:	85 e8       	ldi	r24, 0x85	; 133
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	25 e8       	ldi	r18, 0x85	; 133
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	f9 01       	movw	r30, r18
 338:	20 81       	ld	r18, Z
 33a:	20 61       	ori	r18, 0x10	; 16
 33c:	fc 01       	movw	r30, r24
 33e:	20 83       	st	Z, r18
}
 340:	df 91       	pop	r29
 342:	cf 91       	pop	r28
 344:	ff 91       	pop	r31
 346:	ef 91       	pop	r30
 348:	9f 91       	pop	r25
 34a:	8f 91       	pop	r24
 34c:	3f 91       	pop	r19
 34e:	2f 91       	pop	r18
 350:	0f 90       	pop	r0
 352:	00 92 5f 00 	sts	0x005F, r0
 356:	0f 90       	pop	r0
 358:	1f 90       	pop	r1
 35a:	18 95       	reti

0000035c <__vector_22>:


ISR(USART0_RX_vect){
 35c:	1f 92       	push	r1
 35e:	0f 92       	push	r0
 360:	00 90 5f 00 	lds	r0, 0x005F
 364:	0f 92       	push	r0
 366:	11 24       	eor	r1, r1
 368:	2f 93       	push	r18
 36a:	3f 93       	push	r19
 36c:	8f 93       	push	r24
 36e:	9f 93       	push	r25
 370:	ef 93       	push	r30
 372:	ff 93       	push	r31
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
 378:	cd b7       	in	r28, 0x3d	; 61
 37a:	de b7       	in	r29, 0x3e	; 62
	data = UDR0;
 37c:	80 e8       	ldi	r24, 0x80	; 128
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	fc 01       	movw	r30, r24
 382:	80 81       	ld	r24, Z
 384:	80 93 1f 01 	sts	0x011F, r24
		uart_transmit(temp[1]);
		uart_transmit(temp[0]);
	}
	*/
	//uart_transmit(data);
	UCSR0B &= ~(1<<RXEN0);
 388:	85 e8       	ldi	r24, 0x85	; 133
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	25 e8       	ldi	r18, 0x85	; 133
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	f9 01       	movw	r30, r18
 392:	20 81       	ld	r18, Z
 394:	2f 7e       	andi	r18, 0xEF	; 239
 396:	fc 01       	movw	r30, r24
 398:	20 83       	st	Z, r18
}
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	ff 91       	pop	r31
 3a0:	ef 91       	pop	r30
 3a2:	9f 91       	pop	r25
 3a4:	8f 91       	pop	r24
 3a6:	3f 91       	pop	r19
 3a8:	2f 91       	pop	r18
 3aa:	0f 90       	pop	r0
 3ac:	00 92 5f 00 	sts	0x005F, r0
 3b0:	0f 90       	pop	r0
 3b2:	1f 90       	pop	r1
 3b4:	18 95       	reti

000003b6 <__vector_16>:


ISR(TIMER2_CAPT_vect){
 3b6:	1f 92       	push	r1
 3b8:	0f 92       	push	r0
 3ba:	00 90 5f 00 	lds	r0, 0x005F
 3be:	0f 92       	push	r0
 3c0:	11 24       	eor	r1, r1
 3c2:	2f 93       	push	r18
 3c4:	3f 93       	push	r19
 3c6:	4f 93       	push	r20
 3c8:	5f 93       	push	r21
 3ca:	6f 93       	push	r22
 3cc:	7f 93       	push	r23
 3ce:	8f 93       	push	r24
 3d0:	9f 93       	push	r25
 3d2:	af 93       	push	r26
 3d4:	bf 93       	push	r27
 3d6:	ef 93       	push	r30
 3d8:	ff 93       	push	r31
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
 3de:	cd b7       	in	r28, 0x3d	; 61
 3e0:	de b7       	in	r29, 0x3e	; 62
 3e2:	28 97       	sbiw	r28, 0x08	; 8
 3e4:	de bf       	out	0x3e, r29	; 62
 3e6:	cd bf       	out	0x3d, r28	; 61

	//if rising edge triggered, update rising_edge value
	if(PINB & (1<<PB2)){
 3e8:	86 e3       	ldi	r24, 0x36	; 54
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	fc 01       	movw	r30, r24
 3ee:	80 81       	ld	r24, Z
 3f0:	88 2f       	mov	r24, r24
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	84 70       	andi	r24, 0x04	; 4
 3f6:	99 27       	eor	r25, r25
 3f8:	89 2b       	or	r24, r25
 3fa:	e1 f0       	breq	.+56     	; 0x434 <__vector_16+0x7e>
		n_over_flow = 0;
 3fc:	10 92 0b 01 	sts	0x010B, r1
 400:	10 92 0a 01 	sts	0x010A, r1
		rising_edge = ICR2;
 404:	80 ec       	ldi	r24, 0xC0	; 192
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	fc 01       	movw	r30, r24
 40a:	80 81       	ld	r24, Z
 40c:	91 81       	ldd	r25, Z+1	; 0x01
 40e:	90 93 07 01 	sts	0x0107, r25
 412:	80 93 06 01 	sts	0x0106, r24
		falling_edge = 0;
 416:	10 92 09 01 	sts	0x0109, r1
 41a:	10 92 08 01 	sts	0x0108, r1

		//Change to falling edge triggered to capture 1/4 of rotation
		TCCR2B ^= (1<<ICES2);
 41e:	89 ec       	ldi	r24, 0xC9	; 201
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	29 ec       	ldi	r18, 0xC9	; 201
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	f9 01       	movw	r30, r18
 428:	30 81       	ld	r19, Z
 42a:	20 e4       	ldi	r18, 0x40	; 64
 42c:	23 27       	eor	r18, r19
 42e:	fc 01       	movw	r30, r24
 430:	20 83       	st	Z, r18
 432:	83 c0       	rjmp	.+262    	; 0x53a <__vector_16+0x184>
	}else{
		count_rpm++;
 434:	80 91 0e 01 	lds	r24, 0x010E
 438:	90 91 0f 01 	lds	r25, 0x010F
 43c:	01 96       	adiw	r24, 0x01	; 1
 43e:	90 93 0f 01 	sts	0x010F, r25
 442:	80 93 0e 01 	sts	0x010E, r24
		falling_edge = ICR2;
 446:	80 ec       	ldi	r24, 0xC0	; 192
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	fc 01       	movw	r30, r24
 44c:	80 81       	ld	r24, Z
 44e:	91 81       	ldd	r25, Z+1	; 0x01
 450:	90 93 09 01 	sts	0x0109, r25
 454:	80 93 08 01 	sts	0x0108, r24
		//Calculate the timer value between rising edge and falling edge,
		//hence calculate temporary rpm for future averaging calculation
		int rpm_temp = 1875000/(n_over_flow*65536 - rising_edge + falling_edge);
 458:	80 91 0a 01 	lds	r24, 0x010A
 45c:	90 91 0b 01 	lds	r25, 0x010B
 460:	cc 01       	movw	r24, r24
 462:	a0 e0       	ldi	r26, 0x00	; 0
 464:	b0 e0       	ldi	r27, 0x00	; 0
 466:	ac 01       	movw	r20, r24
 468:	33 27       	eor	r19, r19
 46a:	22 27       	eor	r18, r18
 46c:	80 91 06 01 	lds	r24, 0x0106
 470:	90 91 07 01 	lds	r25, 0x0107
 474:	cc 01       	movw	r24, r24
 476:	a0 e0       	ldi	r26, 0x00	; 0
 478:	b0 e0       	ldi	r27, 0x00	; 0
 47a:	28 1b       	sub	r18, r24
 47c:	39 0b       	sbc	r19, r25
 47e:	4a 0b       	sbc	r20, r26
 480:	5b 0b       	sbc	r21, r27
 482:	80 91 08 01 	lds	r24, 0x0108
 486:	90 91 09 01 	lds	r25, 0x0109
 48a:	cc 01       	movw	r24, r24
 48c:	a0 e0       	ldi	r26, 0x00	; 0
 48e:	b0 e0       	ldi	r27, 0x00	; 0
 490:	28 0f       	add	r18, r24
 492:	39 1f       	adc	r19, r25
 494:	4a 1f       	adc	r20, r26
 496:	5b 1f       	adc	r21, r27
 498:	88 e3       	ldi	r24, 0x38	; 56
 49a:	9c e9       	ldi	r25, 0x9C	; 156
 49c:	ac e1       	ldi	r26, 0x1C	; 28
 49e:	b0 e0       	ldi	r27, 0x00	; 0
 4a0:	bc 01       	movw	r22, r24
 4a2:	cd 01       	movw	r24, r26
 4a4:	cf d3       	rcall	.+1950   	; 0xc44 <__divmodsi4>
 4a6:	da 01       	movw	r26, r20
 4a8:	c9 01       	movw	r24, r18
 4aa:	9a 83       	std	Y+2, r25	; 0x02
 4ac:	89 83       	std	Y+1, r24	; 0x01
		//cur_speed = rpm_temp ;

		//Calculate the average rpm, taking 12 samples, return error and reset count_rpm

		if(count_rpm < 12) {
 4ae:	80 91 0e 01 	lds	r24, 0x010E
 4b2:	90 91 0f 01 	lds	r25, 0x010F
 4b6:	0c 97       	sbiw	r24, 0x0c	; 12
 4b8:	6c f4       	brge	.+26     	; 0x4d4 <__vector_16+0x11e>
			accum_speed += rpm_temp;
 4ba:	20 91 02 01 	lds	r18, 0x0102
 4be:	30 91 03 01 	lds	r19, 0x0103
 4c2:	89 81       	ldd	r24, Y+1	; 0x01
 4c4:	9a 81       	ldd	r25, Y+2	; 0x02
 4c6:	82 0f       	add	r24, r18
 4c8:	93 1f       	adc	r25, r19
 4ca:	90 93 03 01 	sts	0x0103, r25
 4ce:	80 93 02 01 	sts	0x0102, r24
 4d2:	23 c0       	rjmp	.+70     	; 0x51a <__vector_16+0x164>
		} else {
			cur_speed = accum_speed / 12;
 4d4:	80 91 02 01 	lds	r24, 0x0102
 4d8:	90 91 03 01 	lds	r25, 0x0103
 4dc:	2c e0       	ldi	r18, 0x0C	; 12
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	b9 01       	movw	r22, r18
 4e2:	9c d3       	rcall	.+1848   	; 0xc1c <__udivmodhi4>
 4e4:	cb 01       	movw	r24, r22
 4e6:	90 93 01 01 	sts	0x0101, r25
 4ea:	80 93 00 01 	sts	0x0100, r24

			error = 2000 - cur_speed;
 4ee:	80 91 00 01 	lds	r24, 0x0100
 4f2:	90 91 01 01 	lds	r25, 0x0101
 4f6:	20 ed       	ldi	r18, 0xD0	; 208
 4f8:	37 e0       	ldi	r19, 0x07	; 7
 4fa:	a9 01       	movw	r20, r18
 4fc:	48 1b       	sub	r20, r24
 4fe:	59 0b       	sbc	r21, r25
 500:	ca 01       	movw	r24, r20
 502:	90 93 05 01 	sts	0x0105, r25
 506:	80 93 04 01 	sts	0x0104, r24
			//uart_transmit(y[1]);
			//uart_transmit(y[2]);
			//uart_transmit(y[3]);
			//uart_transmit(' ');			

			count_rpm = 0;
 50a:	10 92 0f 01 	sts	0x010F, r1
 50e:	10 92 0e 01 	sts	0x010E, r1
			accum_speed = 0;
 512:	10 92 03 01 	sts	0x0103, r1
 516:	10 92 02 01 	sts	0x0102, r1
		}

		rising_edge = 0;
 51a:	10 92 07 01 	sts	0x0107, r1
 51e:	10 92 06 01 	sts	0x0106, r1
		rpm_temp = 0;
 522:	1a 82       	std	Y+2, r1	; 0x02
 524:	19 82       	std	Y+1, r1	; 0x01
		//Toggle bit to change back to rising edge triggered
		TCCR2B ^= (1<<ICES2);
 526:	89 ec       	ldi	r24, 0xC9	; 201
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	29 ec       	ldi	r18, 0xC9	; 201
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	f9 01       	movw	r30, r18
 530:	30 81       	ld	r19, Z
 532:	20 e4       	ldi	r18, 0x40	; 64
 534:	23 27       	eor	r18, r19
 536:	fc 01       	movw	r30, r24
 538:	20 83       	st	Z, r18
	}
}
 53a:	28 96       	adiw	r28, 0x08	; 8
 53c:	0f b6       	in	r0, 0x3f	; 63
 53e:	f8 94       	cli
 540:	de bf       	out	0x3e, r29	; 62
 542:	0f be       	out	0x3f, r0	; 63
 544:	cd bf       	out	0x3d, r28	; 61
 546:	df 91       	pop	r29
 548:	cf 91       	pop	r28
 54a:	ff 91       	pop	r31
 54c:	ef 91       	pop	r30
 54e:	bf 91       	pop	r27
 550:	af 91       	pop	r26
 552:	9f 91       	pop	r25
 554:	8f 91       	pop	r24
 556:	7f 91       	pop	r23
 558:	6f 91       	pop	r22
 55a:	5f 91       	pop	r21
 55c:	4f 91       	pop	r20
 55e:	3f 91       	pop	r19
 560:	2f 91       	pop	r18
 562:	0f 90       	pop	r0
 564:	00 92 5f 00 	sts	0x005F, r0
 568:	0f 90       	pop	r0
 56a:	1f 90       	pop	r1
 56c:	18 95       	reti

0000056e <__vector_19>:


ISR(TIMER2_OVF_vect){
 56e:	1f 92       	push	r1
 570:	0f 92       	push	r0
 572:	00 90 5f 00 	lds	r0, 0x005F
 576:	0f 92       	push	r0
 578:	11 24       	eor	r1, r1
 57a:	8f 93       	push	r24
 57c:	9f 93       	push	r25
 57e:	cf 93       	push	r28
 580:	df 93       	push	r29
 582:	cd b7       	in	r28, 0x3d	; 61
 584:	de b7       	in	r29, 0x3e	; 62
	n_over_flow ++;
 586:	80 91 0a 01 	lds	r24, 0x010A
 58a:	90 91 0b 01 	lds	r25, 0x010B
 58e:	01 96       	adiw	r24, 0x01	; 1
 590:	90 93 0b 01 	sts	0x010B, r25
 594:	80 93 0a 01 	sts	0x010A, r24
	//if (n_over_flow >1){
		//cur_speed = 0;
	//}
}
 598:	df 91       	pop	r29
 59a:	cf 91       	pop	r28
 59c:	9f 91       	pop	r25
 59e:	8f 91       	pop	r24
 5a0:	0f 90       	pop	r0
 5a2:	00 92 5f 00 	sts	0x005F, r0
 5a6:	0f 90       	pop	r0
 5a8:	1f 90       	pop	r1
 5aa:	18 95       	reti

000005ac <main>:


int main(void)
{
 5ac:	cf 93       	push	r28
 5ae:	df 93       	push	r29
 5b0:	00 d0       	rcall	.+0      	; 0x5b2 <main+0x6>
 5b2:	00 d0       	rcall	.+0      	; 0x5b4 <main+0x8>
 5b4:	cd b7       	in	r28, 0x3d	; 61
 5b6:	de b7       	in	r29, 0x3e	; 62
	// Initialize pin
	// Output: PA5, PA3 for fan drivers, PA7 for detection features
	// Input: PA0(Hall Sensor), PB0(ADC), PB1(ADC), PB2(Input Capture) 
	//PA0 corresponds to hall sensor input
	DDRA |= (1<<DDRA5)|(1<<DDRA3)|(1<<DDRA7);
 5b8:	8a e3       	ldi	r24, 0x3A	; 58
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	2a e3       	ldi	r18, 0x3A	; 58
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	f9 01       	movw	r30, r18
 5c2:	20 81       	ld	r18, Z
 5c4:	28 6a       	ori	r18, 0xA8	; 168
 5c6:	fc 01       	movw	r30, r24
 5c8:	20 83       	st	Z, r18
	DDRA &= ~(1<<DDRA0);
 5ca:	8a e3       	ldi	r24, 0x3A	; 58
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	2a e3       	ldi	r18, 0x3A	; 58
 5d0:	30 e0       	ldi	r19, 0x00	; 0
 5d2:	f9 01       	movw	r30, r18
 5d4:	20 81       	ld	r18, Z
 5d6:	2e 7f       	andi	r18, 0xFE	; 254
 5d8:	fc 01       	movw	r30, r24
 5da:	20 83       	st	Z, r18
	DDRB &= ~((1<<DDRB0)|(DDRB1)|(DDRB2));
 5dc:	87 e3       	ldi	r24, 0x37	; 55
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	27 e3       	ldi	r18, 0x37	; 55
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	f9 01       	movw	r30, r18
 5e6:	20 81       	ld	r18, Z
 5e8:	2c 7f       	andi	r18, 0xFC	; 252
 5ea:	fc 01       	movw	r30, r24
 5ec:	20 83       	st	Z, r18

	//enable the internal pull-up resistor for the hall sensor input
	PUEA = 0b00000001;
 5ee:	83 e6       	ldi	r24, 0x63	; 99
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	21 e0       	ldi	r18, 0x01	; 1
 5f4:	fc 01       	movw	r30, r24
 5f6:	20 83       	st	Z, r18

	cli();
 5f8:	f8 94       	cli

	//enable interrupt on PIN7 for hall sensor input
	PCMSK0 |= (1 << PCINT0);
 5fa:	82 e3       	ldi	r24, 0x32	; 50
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	22 e3       	ldi	r18, 0x32	; 50
 600:	30 e0       	ldi	r19, 0x00	; 0
 602:	f9 01       	movw	r30, r18
 604:	20 81       	ld	r18, Z
 606:	21 60       	ori	r18, 0x01	; 1
 608:	fc 01       	movw	r30, r24
 60a:	20 83       	st	Z, r18
	GIMSK |= (1 << PCIE0);
 60c:	8b e5       	ldi	r24, 0x5B	; 91
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	2b e5       	ldi	r18, 0x5B	; 91
 612:	30 e0       	ldi	r19, 0x00	; 0
 614:	f9 01       	movw	r30, r18
 616:	20 81       	ld	r18, Z
 618:	20 61       	ori	r18, 0x10	; 16
 61a:	fc 01       	movw	r30, r24
 61c:	20 83       	st	Z, r18
	

	//Initialize timer, UART and ADC
	timer_init();
 61e:	7e d0       	rcall	.+252    	; 0x71c <timer_init>
	uart_init();
 620:	de d0       	rcall	.+444    	; 0x7de <uart_init>
	//adc_init();
	
	//enable global interrupt
	sei();
 622:	78 94       	sei

	int pre_error = 0 ;
 624:	1a 82       	std	Y+2, r1	; 0x02
 626:	19 82       	std	Y+1, r1	; 0x01
	int total_error = 0;
 628:	1c 82       	std	Y+4, r1	; 0x04
 62a:	1b 82       	std	Y+3, r1	; 0x03
	
	while (1){
		pid(error,total_error,pre_error);
 62c:	80 91 04 01 	lds	r24, 0x0104
 630:	90 91 05 01 	lds	r25, 0x0105
 634:	fc 01       	movw	r30, r24
 636:	29 81       	ldd	r18, Y+1	; 0x01
 638:	3a 81       	ldd	r19, Y+2	; 0x02
 63a:	8b 81       	ldd	r24, Y+3	; 0x03
 63c:	9c 81       	ldd	r25, Y+4	; 0x04
 63e:	a9 01       	movw	r20, r18
 640:	bc 01       	movw	r22, r24
 642:	cf 01       	movw	r24, r30
 644:	11 d0       	rcall	.+34     	; 0x668 <pid>
		total_error = total_error + error;
 646:	2b 81       	ldd	r18, Y+3	; 0x03
 648:	3c 81       	ldd	r19, Y+4	; 0x04
 64a:	80 91 04 01 	lds	r24, 0x0104
 64e:	90 91 05 01 	lds	r25, 0x0105
 652:	82 0f       	add	r24, r18
 654:	93 1f       	adc	r25, r19
 656:	9c 83       	std	Y+4, r25	; 0x04
 658:	8b 83       	std	Y+3, r24	; 0x03
		pre_error = error;
 65a:	80 91 04 01 	lds	r24, 0x0104
 65e:	90 91 05 01 	lds	r25, 0x0105
 662:	9a 83       	std	Y+2, r25	; 0x02
 664:	89 83       	std	Y+1, r24	; 0x01
	}
 666:	e2 cf       	rjmp	.-60     	; 0x62c <main+0x80>

00000668 <pid>:


#include "PID.h"


void pid(int error, int sum_error, int pre_error){
 668:	cf 93       	push	r28
 66a:	df 93       	push	r29
 66c:	cd b7       	in	r28, 0x3d	; 61
 66e:	de b7       	in	r29, 0x3e	; 62
 670:	2c 97       	sbiw	r28, 0x0c	; 12
 672:	0f b6       	in	r0, 0x3f	; 63
 674:	f8 94       	cli
 676:	de bf       	out	0x3e, r29	; 62
 678:	0f be       	out	0x3f, r0	; 63
 67a:	cd bf       	out	0x3d, r28	; 61
 67c:	98 87       	std	Y+8, r25	; 0x08
 67e:	8f 83       	std	Y+7, r24	; 0x07
 680:	7a 87       	std	Y+10, r23	; 0x0a
 682:	69 87       	std	Y+9, r22	; 0x09
 684:	5c 87       	std	Y+12, r21	; 0x0c
 686:	4b 87       	std	Y+11, r20	; 0x0b
	
	int p_term = error * p_coefficient;
 688:	8f 81       	ldd	r24, Y+7	; 0x07
 68a:	98 85       	ldd	r25, Y+8	; 0x08
 68c:	09 2e       	mov	r0, r25
 68e:	00 0c       	add	r0, r0
 690:	aa 0b       	sbc	r26, r26
 692:	bb 0b       	sbc	r27, r27
 694:	bc 01       	movw	r22, r24
 696:	cd 01       	movw	r24, r26
 698:	b9 d1       	rcall	.+882    	; 0xa0c <__floatsisf>
 69a:	dc 01       	movw	r26, r24
 69c:	cb 01       	movw	r24, r22
 69e:	20 e0       	ldi	r18, 0x00	; 0
 6a0:	30 e0       	ldi	r19, 0x00	; 0
 6a2:	40 e0       	ldi	r20, 0x00	; 0
 6a4:	5f e3       	ldi	r21, 0x3F	; 63
 6a6:	bc 01       	movw	r22, r24
 6a8:	cd 01       	movw	r24, r26
 6aa:	3c d2       	rcall	.+1144   	; 0xb24 <__mulsf3>
 6ac:	dc 01       	movw	r26, r24
 6ae:	cb 01       	movw	r24, r22
 6b0:	bc 01       	movw	r22, r24
 6b2:	cd 01       	movw	r24, r26
 6b4:	78 d1       	rcall	.+752    	; 0x9a6 <__fixsfsi>
 6b6:	dc 01       	movw	r26, r24
 6b8:	cb 01       	movw	r24, r22
 6ba:	9a 83       	std	Y+2, r25	; 0x02
 6bc:	89 83       	std	Y+1, r24	; 0x01

	int i_term = sum_error * i_coefficient;
 6be:	89 85       	ldd	r24, Y+9	; 0x09
 6c0:	9a 85       	ldd	r25, Y+10	; 0x0a
 6c2:	09 2e       	mov	r0, r25
 6c4:	00 0c       	add	r0, r0
 6c6:	aa 0b       	sbc	r26, r26
 6c8:	bb 0b       	sbc	r27, r27
 6ca:	bc 01       	movw	r22, r24
 6cc:	cd 01       	movw	r24, r26
 6ce:	9e d1       	rcall	.+828    	; 0xa0c <__floatsisf>
 6d0:	dc 01       	movw	r26, r24
 6d2:	cb 01       	movw	r24, r22
 6d4:	2a e0       	ldi	r18, 0x0A	; 10
 6d6:	37 ed       	ldi	r19, 0xD7	; 215
 6d8:	43 e2       	ldi	r20, 0x23	; 35
 6da:	5c e3       	ldi	r21, 0x3C	; 60
 6dc:	bc 01       	movw	r22, r24
 6de:	cd 01       	movw	r24, r26
 6e0:	21 d2       	rcall	.+1090   	; 0xb24 <__mulsf3>
 6e2:	dc 01       	movw	r26, r24
 6e4:	cb 01       	movw	r24, r22
 6e6:	bc 01       	movw	r22, r24
 6e8:	cd 01       	movw	r24, r26
 6ea:	5d d1       	rcall	.+698    	; 0x9a6 <__fixsfsi>
 6ec:	dc 01       	movw	r26, r24
 6ee:	cb 01       	movw	r24, r22
 6f0:	9c 83       	std	Y+4, r25	; 0x04
 6f2:	8b 83       	std	Y+3, r24	; 0x03

	int pid_output = p_term;
 6f4:	89 81       	ldd	r24, Y+1	; 0x01
 6f6:	9a 81       	ldd	r25, Y+2	; 0x02
 6f8:	9e 83       	std	Y+6, r25	; 0x06
 6fa:	8d 83       	std	Y+5, r24	; 0x05
		
	OCR1B = pid_output ;
 6fc:	88 e4       	ldi	r24, 0x48	; 72
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	2d 81       	ldd	r18, Y+5	; 0x05
 702:	3e 81       	ldd	r19, Y+6	; 0x06
 704:	fc 01       	movw	r30, r24
 706:	31 83       	std	Z+1, r19	; 0x01
 708:	20 83       	st	Z, r18
}
 70a:	2c 96       	adiw	r28, 0x0c	; 12
 70c:	0f b6       	in	r0, 0x3f	; 63
 70e:	f8 94       	cli
 710:	de bf       	out	0x3e, r29	; 62
 712:	0f be       	out	0x3f, r0	; 63
 714:	cd bf       	out	0x3d, r28	; 61
 716:	df 91       	pop	r29
 718:	cf 91       	pop	r28
 71a:	08 95       	ret

0000071c <timer_init>:

#include "timer.h"

void timer_init(){
 71c:	cf 93       	push	r28
 71e:	df 93       	push	r29
 720:	cd b7       	in	r28, 0x3d	; 61
 722:	de b7       	in	r29, 0x3e	; 62
	
	//Setting fast PWM mode OCR1B to operate in non-inverting mode.
	TCCR1B |= (1<<CS10)|(1 << WGM12)|(1<<WGM13)|(1<<ICES1);
 724:	8e e4       	ldi	r24, 0x4E	; 78
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	2e e4       	ldi	r18, 0x4E	; 78
 72a:	30 e0       	ldi	r19, 0x00	; 0
 72c:	f9 01       	movw	r30, r18
 72e:	20 81       	ld	r18, Z
 730:	29 65       	ori	r18, 0x59	; 89
 732:	fc 01       	movw	r30, r24
 734:	20 83       	st	Z, r18
	TCCR1A |= (1<< WGM11)|(1<<WGM10)|(1<<COM1B1);
 736:	8f e4       	ldi	r24, 0x4F	; 79
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	2f e4       	ldi	r18, 0x4F	; 79
 73c:	30 e0       	ldi	r19, 0x00	; 0
 73e:	f9 01       	movw	r30, r18
 740:	20 81       	ld	r18, Z
 742:	23 62       	ori	r18, 0x23	; 35
 744:	fc 01       	movw	r30, r24
 746:	20 83       	st	Z, r18
	
	//route PWM to switches
	TOCPMSA1 |= (1<<TOCC4S0);
 748:	88 e6       	ldi	r24, 0x68	; 104
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	28 e6       	ldi	r18, 0x68	; 104
 74e:	30 e0       	ldi	r19, 0x00	; 0
 750:	f9 01       	movw	r30, r18
 752:	20 81       	ld	r18, Z
 754:	21 60       	ori	r18, 0x01	; 1
 756:	fc 01       	movw	r30, r24
 758:	20 83       	st	Z, r18
	TOCPMSA0 |= (1<<TOCC2S0);
 75a:	87 e6       	ldi	r24, 0x67	; 103
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	27 e6       	ldi	r18, 0x67	; 103
 760:	30 e0       	ldi	r19, 0x00	; 0
 762:	f9 01       	movw	r30, r18
 764:	20 81       	ld	r18, Z
 766:	20 61       	ori	r18, 0x10	; 16
 768:	fc 01       	movw	r30, r24
 76a:	20 83       	st	Z, r18

	TOCPMCOE |= (1<<TOCC4OE);
 76c:	86 e6       	ldi	r24, 0x66	; 102
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	26 e6       	ldi	r18, 0x66	; 102
 772:	30 e0       	ldi	r19, 0x00	; 0
 774:	f9 01       	movw	r30, r18
 776:	20 81       	ld	r18, Z
 778:	20 61       	ori	r18, 0x10	; 16
 77a:	fc 01       	movw	r30, r24
 77c:	20 83       	st	Z, r18

	//Initilise timer 2 for input capture
	TIMSK2 |= (1<<ICIE2)|(1<<TOIE2);
 77e:	81 e3       	ldi	r24, 0x31	; 49
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	21 e3       	ldi	r18, 0x31	; 49
 784:	30 e0       	ldi	r19, 0x00	; 0
 786:	f9 01       	movw	r30, r18
 788:	20 81       	ld	r18, Z
 78a:	21 62       	ori	r18, 0x21	; 33
 78c:	fc 01       	movw	r30, r24
 78e:	20 83       	st	Z, r18
	TCCR2B |= (1<<CS21)|(1<<ICES2)|(1<<CS20);
 790:	89 ec       	ldi	r24, 0xC9	; 201
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	29 ec       	ldi	r18, 0xC9	; 201
 796:	30 e0       	ldi	r19, 0x00	; 0
 798:	f9 01       	movw	r30, r18
 79a:	20 81       	ld	r18, Z
 79c:	23 64       	ori	r18, 0x43	; 67
 79e:	fc 01       	movw	r30, r24
 7a0:	20 83       	st	Z, r18
	TCCR2A |= (1<<COM2B1);
 7a2:	8a ec       	ldi	r24, 0xCA	; 202
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	2a ec       	ldi	r18, 0xCA	; 202
 7a8:	30 e0       	ldi	r19, 0x00	; 0
 7aa:	f9 01       	movw	r30, r18
 7ac:	20 81       	ld	r18, Z
 7ae:	20 62       	ori	r18, 0x20	; 32
 7b0:	fc 01       	movw	r30, r24
 7b2:	20 83       	st	Z, r18
	
	
	TCNT0 = 0;
 7b4:	82 e5       	ldi	r24, 0x52	; 82
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	fc 01       	movw	r30, r24
 7ba:	10 82       	st	Z, r1

	//Setting 30k Hz PWM
	OCR1A = 266;
 7bc:	8a e4       	ldi	r24, 0x4A	; 74
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	2a e0       	ldi	r18, 0x0A	; 10
 7c2:	31 e0       	ldi	r19, 0x01	; 1
 7c4:	fc 01       	movw	r30, r24
 7c6:	31 83       	std	Z+1, r19	; 0x01
 7c8:	20 83       	st	Z, r18

	//Setting duty cycle
	OCR1B = 150;
 7ca:	88 e4       	ldi	r24, 0x48	; 72
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	26 e9       	ldi	r18, 0x96	; 150
 7d0:	30 e0       	ldi	r19, 0x00	; 0
 7d2:	fc 01       	movw	r30, r24
 7d4:	31 83       	std	Z+1, r19	; 0x01
 7d6:	20 83       	st	Z, r18
}
 7d8:	df 91       	pop	r29
 7da:	cf 91       	pop	r28
 7dc:	08 95       	ret

000007de <uart_init>:
 */ 

 #include "uart.h"


 void uart_init(){
 7de:	cf 93       	push	r28
 7e0:	df 93       	push	r29
 7e2:	cd b7       	in	r28, 0x3d	; 61
 7e4:	de b7       	in	r29, 0x3e	; 62
	UBRR0	= UBRR; //Setting baud rate to 9600
 7e6:	81 e8       	ldi	r24, 0x81	; 129
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	23 e3       	ldi	r18, 0x33	; 51
 7ec:	30 e0       	ldi	r19, 0x00	; 0
 7ee:	fc 01       	movw	r30, r24
 7f0:	31 83       	std	Z+1, r19	; 0x01
 7f2:	20 83       	st	Z, r18
	//Enable transmitter and receiver
	UCSR0B |= (1<<TXEN0)|(1<<RXEN0)|(1<<RXCIE0)|(1<<TXCIE0);
 7f4:	85 e8       	ldi	r24, 0x85	; 133
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	25 e8       	ldi	r18, 0x85	; 133
 7fa:	30 e0       	ldi	r19, 0x00	; 0
 7fc:	f9 01       	movw	r30, r18
 7fe:	20 81       	ld	r18, Z
 800:	28 6d       	ori	r18, 0xD8	; 216
 802:	fc 01       	movw	r30, r24
 804:	20 83       	st	Z, r18
//	UCSR0D |= (1<<RXSIE0);
 }
 806:	df 91       	pop	r29
 808:	cf 91       	pop	r28
 80a:	08 95       	ret

0000080c <__subsf3>:
 80c:	50 58       	subi	r21, 0x80	; 128

0000080e <__addsf3>:
 80e:	bb 27       	eor	r27, r27
 810:	aa 27       	eor	r26, r26
 812:	0e d0       	rcall	.+28     	; 0x830 <__addsf3x>
 814:	4d c1       	rjmp	.+666    	; 0xab0 <__fp_round>
 816:	3e d1       	rcall	.+636    	; 0xa94 <__fp_pscA>
 818:	30 f0       	brcs	.+12     	; 0x826 <__addsf3+0x18>
 81a:	43 d1       	rcall	.+646    	; 0xaa2 <__fp_pscB>
 81c:	20 f0       	brcs	.+8      	; 0x826 <__addsf3+0x18>
 81e:	31 f4       	brne	.+12     	; 0x82c <__addsf3+0x1e>
 820:	9f 3f       	cpi	r25, 0xFF	; 255
 822:	11 f4       	brne	.+4      	; 0x828 <__addsf3+0x1a>
 824:	1e f4       	brtc	.+6      	; 0x82c <__addsf3+0x1e>
 826:	33 c1       	rjmp	.+614    	; 0xa8e <__fp_nan>
 828:	0e f4       	brtc	.+2      	; 0x82c <__addsf3+0x1e>
 82a:	e0 95       	com	r30
 82c:	e7 fb       	bst	r30, 7
 82e:	29 c1       	rjmp	.+594    	; 0xa82 <__fp_inf>

00000830 <__addsf3x>:
 830:	e9 2f       	mov	r30, r25
 832:	4f d1       	rcall	.+670    	; 0xad2 <__fp_split3>
 834:	80 f3       	brcs	.-32     	; 0x816 <__addsf3+0x8>
 836:	ba 17       	cp	r27, r26
 838:	62 07       	cpc	r22, r18
 83a:	73 07       	cpc	r23, r19
 83c:	84 07       	cpc	r24, r20
 83e:	95 07       	cpc	r25, r21
 840:	18 f0       	brcs	.+6      	; 0x848 <__addsf3x+0x18>
 842:	71 f4       	brne	.+28     	; 0x860 <__addsf3x+0x30>
 844:	9e f5       	brtc	.+102    	; 0x8ac <__addsf3x+0x7c>
 846:	67 c1       	rjmp	.+718    	; 0xb16 <__fp_zero>
 848:	0e f4       	brtc	.+2      	; 0x84c <__addsf3x+0x1c>
 84a:	e0 95       	com	r30
 84c:	0b 2e       	mov	r0, r27
 84e:	ba 2f       	mov	r27, r26
 850:	a0 2d       	mov	r26, r0
 852:	0b 01       	movw	r0, r22
 854:	b9 01       	movw	r22, r18
 856:	90 01       	movw	r18, r0
 858:	0c 01       	movw	r0, r24
 85a:	ca 01       	movw	r24, r20
 85c:	a0 01       	movw	r20, r0
 85e:	11 24       	eor	r1, r1
 860:	ff 27       	eor	r31, r31
 862:	59 1b       	sub	r21, r25
 864:	99 f0       	breq	.+38     	; 0x88c <__addsf3x+0x5c>
 866:	59 3f       	cpi	r21, 0xF9	; 249
 868:	50 f4       	brcc	.+20     	; 0x87e <__addsf3x+0x4e>
 86a:	50 3e       	cpi	r21, 0xE0	; 224
 86c:	68 f1       	brcs	.+90     	; 0x8c8 <__addsf3x+0x98>
 86e:	1a 16       	cp	r1, r26
 870:	f0 40       	sbci	r31, 0x00	; 0
 872:	a2 2f       	mov	r26, r18
 874:	23 2f       	mov	r18, r19
 876:	34 2f       	mov	r19, r20
 878:	44 27       	eor	r20, r20
 87a:	58 5f       	subi	r21, 0xF8	; 248
 87c:	f3 cf       	rjmp	.-26     	; 0x864 <__addsf3x+0x34>
 87e:	46 95       	lsr	r20
 880:	37 95       	ror	r19
 882:	27 95       	ror	r18
 884:	a7 95       	ror	r26
 886:	f0 40       	sbci	r31, 0x00	; 0
 888:	53 95       	inc	r21
 88a:	c9 f7       	brne	.-14     	; 0x87e <__addsf3x+0x4e>
 88c:	7e f4       	brtc	.+30     	; 0x8ac <__addsf3x+0x7c>
 88e:	1f 16       	cp	r1, r31
 890:	ba 0b       	sbc	r27, r26
 892:	62 0b       	sbc	r22, r18
 894:	73 0b       	sbc	r23, r19
 896:	84 0b       	sbc	r24, r20
 898:	ba f0       	brmi	.+46     	; 0x8c8 <__addsf3x+0x98>
 89a:	91 50       	subi	r25, 0x01	; 1
 89c:	a1 f0       	breq	.+40     	; 0x8c6 <__addsf3x+0x96>
 89e:	ff 0f       	add	r31, r31
 8a0:	bb 1f       	adc	r27, r27
 8a2:	66 1f       	adc	r22, r22
 8a4:	77 1f       	adc	r23, r23
 8a6:	88 1f       	adc	r24, r24
 8a8:	c2 f7       	brpl	.-16     	; 0x89a <__addsf3x+0x6a>
 8aa:	0e c0       	rjmp	.+28     	; 0x8c8 <__addsf3x+0x98>
 8ac:	ba 0f       	add	r27, r26
 8ae:	62 1f       	adc	r22, r18
 8b0:	73 1f       	adc	r23, r19
 8b2:	84 1f       	adc	r24, r20
 8b4:	48 f4       	brcc	.+18     	; 0x8c8 <__addsf3x+0x98>
 8b6:	87 95       	ror	r24
 8b8:	77 95       	ror	r23
 8ba:	67 95       	ror	r22
 8bc:	b7 95       	ror	r27
 8be:	f7 95       	ror	r31
 8c0:	9e 3f       	cpi	r25, 0xFE	; 254
 8c2:	08 f0       	brcs	.+2      	; 0x8c6 <__addsf3x+0x96>
 8c4:	b3 cf       	rjmp	.-154    	; 0x82c <__addsf3+0x1e>
 8c6:	93 95       	inc	r25
 8c8:	88 0f       	add	r24, r24
 8ca:	08 f0       	brcs	.+2      	; 0x8ce <__addsf3x+0x9e>
 8cc:	99 27       	eor	r25, r25
 8ce:	ee 0f       	add	r30, r30
 8d0:	97 95       	ror	r25
 8d2:	87 95       	ror	r24
 8d4:	08 95       	ret

000008d6 <__divsf3>:
 8d6:	0c d0       	rcall	.+24     	; 0x8f0 <__divsf3x>
 8d8:	eb c0       	rjmp	.+470    	; 0xab0 <__fp_round>
 8da:	e3 d0       	rcall	.+454    	; 0xaa2 <__fp_pscB>
 8dc:	40 f0       	brcs	.+16     	; 0x8ee <__divsf3+0x18>
 8de:	da d0       	rcall	.+436    	; 0xa94 <__fp_pscA>
 8e0:	30 f0       	brcs	.+12     	; 0x8ee <__divsf3+0x18>
 8e2:	21 f4       	brne	.+8      	; 0x8ec <__divsf3+0x16>
 8e4:	5f 3f       	cpi	r21, 0xFF	; 255
 8e6:	19 f0       	breq	.+6      	; 0x8ee <__divsf3+0x18>
 8e8:	cc c0       	rjmp	.+408    	; 0xa82 <__fp_inf>
 8ea:	51 11       	cpse	r21, r1
 8ec:	15 c1       	rjmp	.+554    	; 0xb18 <__fp_szero>
 8ee:	cf c0       	rjmp	.+414    	; 0xa8e <__fp_nan>

000008f0 <__divsf3x>:
 8f0:	f0 d0       	rcall	.+480    	; 0xad2 <__fp_split3>
 8f2:	98 f3       	brcs	.-26     	; 0x8da <__divsf3+0x4>

000008f4 <__divsf3_pse>:
 8f4:	99 23       	and	r25, r25
 8f6:	c9 f3       	breq	.-14     	; 0x8ea <__divsf3+0x14>
 8f8:	55 23       	and	r21, r21
 8fa:	b1 f3       	breq	.-20     	; 0x8e8 <__divsf3+0x12>
 8fc:	95 1b       	sub	r25, r21
 8fe:	55 0b       	sbc	r21, r21
 900:	bb 27       	eor	r27, r27
 902:	aa 27       	eor	r26, r26
 904:	62 17       	cp	r22, r18
 906:	73 07       	cpc	r23, r19
 908:	84 07       	cpc	r24, r20
 90a:	38 f0       	brcs	.+14     	; 0x91a <__divsf3_pse+0x26>
 90c:	9f 5f       	subi	r25, 0xFF	; 255
 90e:	5f 4f       	sbci	r21, 0xFF	; 255
 910:	22 0f       	add	r18, r18
 912:	33 1f       	adc	r19, r19
 914:	44 1f       	adc	r20, r20
 916:	aa 1f       	adc	r26, r26
 918:	a9 f3       	breq	.-22     	; 0x904 <__divsf3_pse+0x10>
 91a:	33 d0       	rcall	.+102    	; 0x982 <__divsf3_pse+0x8e>
 91c:	0e 2e       	mov	r0, r30
 91e:	3a f0       	brmi	.+14     	; 0x92e <__divsf3_pse+0x3a>
 920:	e0 e8       	ldi	r30, 0x80	; 128
 922:	30 d0       	rcall	.+96     	; 0x984 <__divsf3_pse+0x90>
 924:	91 50       	subi	r25, 0x01	; 1
 926:	50 40       	sbci	r21, 0x00	; 0
 928:	e6 95       	lsr	r30
 92a:	00 1c       	adc	r0, r0
 92c:	ca f7       	brpl	.-14     	; 0x920 <__divsf3_pse+0x2c>
 92e:	29 d0       	rcall	.+82     	; 0x982 <__divsf3_pse+0x8e>
 930:	fe 2f       	mov	r31, r30
 932:	27 d0       	rcall	.+78     	; 0x982 <__divsf3_pse+0x8e>
 934:	66 0f       	add	r22, r22
 936:	77 1f       	adc	r23, r23
 938:	88 1f       	adc	r24, r24
 93a:	bb 1f       	adc	r27, r27
 93c:	26 17       	cp	r18, r22
 93e:	37 07       	cpc	r19, r23
 940:	48 07       	cpc	r20, r24
 942:	ab 07       	cpc	r26, r27
 944:	b0 e8       	ldi	r27, 0x80	; 128
 946:	09 f0       	breq	.+2      	; 0x94a <__divsf3_pse+0x56>
 948:	bb 0b       	sbc	r27, r27
 94a:	80 2d       	mov	r24, r0
 94c:	bf 01       	movw	r22, r30
 94e:	ff 27       	eor	r31, r31
 950:	93 58       	subi	r25, 0x83	; 131
 952:	5f 4f       	sbci	r21, 0xFF	; 255
 954:	2a f0       	brmi	.+10     	; 0x960 <__divsf3_pse+0x6c>
 956:	9e 3f       	cpi	r25, 0xFE	; 254
 958:	51 05       	cpc	r21, r1
 95a:	68 f0       	brcs	.+26     	; 0x976 <__divsf3_pse+0x82>
 95c:	92 c0       	rjmp	.+292    	; 0xa82 <__fp_inf>
 95e:	dc c0       	rjmp	.+440    	; 0xb18 <__fp_szero>
 960:	5f 3f       	cpi	r21, 0xFF	; 255
 962:	ec f3       	brlt	.-6      	; 0x95e <__divsf3_pse+0x6a>
 964:	98 3e       	cpi	r25, 0xE8	; 232
 966:	dc f3       	brlt	.-10     	; 0x95e <__divsf3_pse+0x6a>
 968:	86 95       	lsr	r24
 96a:	77 95       	ror	r23
 96c:	67 95       	ror	r22
 96e:	b7 95       	ror	r27
 970:	f7 95       	ror	r31
 972:	9f 5f       	subi	r25, 0xFF	; 255
 974:	c9 f7       	brne	.-14     	; 0x968 <__divsf3_pse+0x74>
 976:	88 0f       	add	r24, r24
 978:	91 1d       	adc	r25, r1
 97a:	96 95       	lsr	r25
 97c:	87 95       	ror	r24
 97e:	97 f9       	bld	r25, 7
 980:	08 95       	ret
 982:	e1 e0       	ldi	r30, 0x01	; 1
 984:	66 0f       	add	r22, r22
 986:	77 1f       	adc	r23, r23
 988:	88 1f       	adc	r24, r24
 98a:	bb 1f       	adc	r27, r27
 98c:	62 17       	cp	r22, r18
 98e:	73 07       	cpc	r23, r19
 990:	84 07       	cpc	r24, r20
 992:	ba 07       	cpc	r27, r26
 994:	20 f0       	brcs	.+8      	; 0x99e <__divsf3_pse+0xaa>
 996:	62 1b       	sub	r22, r18
 998:	73 0b       	sbc	r23, r19
 99a:	84 0b       	sbc	r24, r20
 99c:	ba 0b       	sbc	r27, r26
 99e:	ee 1f       	adc	r30, r30
 9a0:	88 f7       	brcc	.-30     	; 0x984 <__divsf3_pse+0x90>
 9a2:	e0 95       	com	r30
 9a4:	08 95       	ret

000009a6 <__fixsfsi>:
 9a6:	04 d0       	rcall	.+8      	; 0x9b0 <__fixunssfsi>
 9a8:	68 94       	set
 9aa:	b1 11       	cpse	r27, r1
 9ac:	b5 c0       	rjmp	.+362    	; 0xb18 <__fp_szero>
 9ae:	08 95       	ret

000009b0 <__fixunssfsi>:
 9b0:	98 d0       	rcall	.+304    	; 0xae2 <__fp_splitA>
 9b2:	88 f0       	brcs	.+34     	; 0x9d6 <__fixunssfsi+0x26>
 9b4:	9f 57       	subi	r25, 0x7F	; 127
 9b6:	90 f0       	brcs	.+36     	; 0x9dc <__fixunssfsi+0x2c>
 9b8:	b9 2f       	mov	r27, r25
 9ba:	99 27       	eor	r25, r25
 9bc:	b7 51       	subi	r27, 0x17	; 23
 9be:	a0 f0       	brcs	.+40     	; 0x9e8 <__fixunssfsi+0x38>
 9c0:	d1 f0       	breq	.+52     	; 0x9f6 <__fixunssfsi+0x46>
 9c2:	66 0f       	add	r22, r22
 9c4:	77 1f       	adc	r23, r23
 9c6:	88 1f       	adc	r24, r24
 9c8:	99 1f       	adc	r25, r25
 9ca:	1a f0       	brmi	.+6      	; 0x9d2 <__fixunssfsi+0x22>
 9cc:	ba 95       	dec	r27
 9ce:	c9 f7       	brne	.-14     	; 0x9c2 <__fixunssfsi+0x12>
 9d0:	12 c0       	rjmp	.+36     	; 0x9f6 <__fixunssfsi+0x46>
 9d2:	b1 30       	cpi	r27, 0x01	; 1
 9d4:	81 f0       	breq	.+32     	; 0x9f6 <__fixunssfsi+0x46>
 9d6:	9f d0       	rcall	.+318    	; 0xb16 <__fp_zero>
 9d8:	b1 e0       	ldi	r27, 0x01	; 1
 9da:	08 95       	ret
 9dc:	9c c0       	rjmp	.+312    	; 0xb16 <__fp_zero>
 9de:	67 2f       	mov	r22, r23
 9e0:	78 2f       	mov	r23, r24
 9e2:	88 27       	eor	r24, r24
 9e4:	b8 5f       	subi	r27, 0xF8	; 248
 9e6:	39 f0       	breq	.+14     	; 0x9f6 <__fixunssfsi+0x46>
 9e8:	b9 3f       	cpi	r27, 0xF9	; 249
 9ea:	cc f3       	brlt	.-14     	; 0x9de <__fixunssfsi+0x2e>
 9ec:	86 95       	lsr	r24
 9ee:	77 95       	ror	r23
 9f0:	67 95       	ror	r22
 9f2:	b3 95       	inc	r27
 9f4:	d9 f7       	brne	.-10     	; 0x9ec <__fixunssfsi+0x3c>
 9f6:	3e f4       	brtc	.+14     	; 0xa06 <__fixunssfsi+0x56>
 9f8:	90 95       	com	r25
 9fa:	80 95       	com	r24
 9fc:	70 95       	com	r23
 9fe:	61 95       	neg	r22
 a00:	7f 4f       	sbci	r23, 0xFF	; 255
 a02:	8f 4f       	sbci	r24, 0xFF	; 255
 a04:	9f 4f       	sbci	r25, 0xFF	; 255
 a06:	08 95       	ret

00000a08 <__floatunsisf>:
 a08:	e8 94       	clt
 a0a:	09 c0       	rjmp	.+18     	; 0xa1e <__floatsisf+0x12>

00000a0c <__floatsisf>:
 a0c:	97 fb       	bst	r25, 7
 a0e:	3e f4       	brtc	.+14     	; 0xa1e <__floatsisf+0x12>
 a10:	90 95       	com	r25
 a12:	80 95       	com	r24
 a14:	70 95       	com	r23
 a16:	61 95       	neg	r22
 a18:	7f 4f       	sbci	r23, 0xFF	; 255
 a1a:	8f 4f       	sbci	r24, 0xFF	; 255
 a1c:	9f 4f       	sbci	r25, 0xFF	; 255
 a1e:	99 23       	and	r25, r25
 a20:	a9 f0       	breq	.+42     	; 0xa4c <__floatsisf+0x40>
 a22:	f9 2f       	mov	r31, r25
 a24:	96 e9       	ldi	r25, 0x96	; 150
 a26:	bb 27       	eor	r27, r27
 a28:	93 95       	inc	r25
 a2a:	f6 95       	lsr	r31
 a2c:	87 95       	ror	r24
 a2e:	77 95       	ror	r23
 a30:	67 95       	ror	r22
 a32:	b7 95       	ror	r27
 a34:	f1 11       	cpse	r31, r1
 a36:	f8 cf       	rjmp	.-16     	; 0xa28 <__floatsisf+0x1c>
 a38:	fa f4       	brpl	.+62     	; 0xa78 <__floatsisf+0x6c>
 a3a:	bb 0f       	add	r27, r27
 a3c:	11 f4       	brne	.+4      	; 0xa42 <__floatsisf+0x36>
 a3e:	60 ff       	sbrs	r22, 0
 a40:	1b c0       	rjmp	.+54     	; 0xa78 <__floatsisf+0x6c>
 a42:	6f 5f       	subi	r22, 0xFF	; 255
 a44:	7f 4f       	sbci	r23, 0xFF	; 255
 a46:	8f 4f       	sbci	r24, 0xFF	; 255
 a48:	9f 4f       	sbci	r25, 0xFF	; 255
 a4a:	16 c0       	rjmp	.+44     	; 0xa78 <__floatsisf+0x6c>
 a4c:	88 23       	and	r24, r24
 a4e:	11 f0       	breq	.+4      	; 0xa54 <__floatsisf+0x48>
 a50:	96 e9       	ldi	r25, 0x96	; 150
 a52:	11 c0       	rjmp	.+34     	; 0xa76 <__floatsisf+0x6a>
 a54:	77 23       	and	r23, r23
 a56:	21 f0       	breq	.+8      	; 0xa60 <__floatsisf+0x54>
 a58:	9e e8       	ldi	r25, 0x8E	; 142
 a5a:	87 2f       	mov	r24, r23
 a5c:	76 2f       	mov	r23, r22
 a5e:	05 c0       	rjmp	.+10     	; 0xa6a <__floatsisf+0x5e>
 a60:	66 23       	and	r22, r22
 a62:	71 f0       	breq	.+28     	; 0xa80 <__floatsisf+0x74>
 a64:	96 e8       	ldi	r25, 0x86	; 134
 a66:	86 2f       	mov	r24, r22
 a68:	70 e0       	ldi	r23, 0x00	; 0
 a6a:	60 e0       	ldi	r22, 0x00	; 0
 a6c:	2a f0       	brmi	.+10     	; 0xa78 <__floatsisf+0x6c>
 a6e:	9a 95       	dec	r25
 a70:	66 0f       	add	r22, r22
 a72:	77 1f       	adc	r23, r23
 a74:	88 1f       	adc	r24, r24
 a76:	da f7       	brpl	.-10     	; 0xa6e <__floatsisf+0x62>
 a78:	88 0f       	add	r24, r24
 a7a:	96 95       	lsr	r25
 a7c:	87 95       	ror	r24
 a7e:	97 f9       	bld	r25, 7
 a80:	08 95       	ret

00000a82 <__fp_inf>:
 a82:	97 f9       	bld	r25, 7
 a84:	9f 67       	ori	r25, 0x7F	; 127
 a86:	80 e8       	ldi	r24, 0x80	; 128
 a88:	70 e0       	ldi	r23, 0x00	; 0
 a8a:	60 e0       	ldi	r22, 0x00	; 0
 a8c:	08 95       	ret

00000a8e <__fp_nan>:
 a8e:	9f ef       	ldi	r25, 0xFF	; 255
 a90:	80 ec       	ldi	r24, 0xC0	; 192
 a92:	08 95       	ret

00000a94 <__fp_pscA>:
 a94:	00 24       	eor	r0, r0
 a96:	0a 94       	dec	r0
 a98:	16 16       	cp	r1, r22
 a9a:	17 06       	cpc	r1, r23
 a9c:	18 06       	cpc	r1, r24
 a9e:	09 06       	cpc	r0, r25
 aa0:	08 95       	ret

00000aa2 <__fp_pscB>:
 aa2:	00 24       	eor	r0, r0
 aa4:	0a 94       	dec	r0
 aa6:	12 16       	cp	r1, r18
 aa8:	13 06       	cpc	r1, r19
 aaa:	14 06       	cpc	r1, r20
 aac:	05 06       	cpc	r0, r21
 aae:	08 95       	ret

00000ab0 <__fp_round>:
 ab0:	09 2e       	mov	r0, r25
 ab2:	03 94       	inc	r0
 ab4:	00 0c       	add	r0, r0
 ab6:	11 f4       	brne	.+4      	; 0xabc <__fp_round+0xc>
 ab8:	88 23       	and	r24, r24
 aba:	52 f0       	brmi	.+20     	; 0xad0 <__fp_round+0x20>
 abc:	bb 0f       	add	r27, r27
 abe:	40 f4       	brcc	.+16     	; 0xad0 <__fp_round+0x20>
 ac0:	bf 2b       	or	r27, r31
 ac2:	11 f4       	brne	.+4      	; 0xac8 <__fp_round+0x18>
 ac4:	60 ff       	sbrs	r22, 0
 ac6:	04 c0       	rjmp	.+8      	; 0xad0 <__fp_round+0x20>
 ac8:	6f 5f       	subi	r22, 0xFF	; 255
 aca:	7f 4f       	sbci	r23, 0xFF	; 255
 acc:	8f 4f       	sbci	r24, 0xFF	; 255
 ace:	9f 4f       	sbci	r25, 0xFF	; 255
 ad0:	08 95       	ret

00000ad2 <__fp_split3>:
 ad2:	57 fd       	sbrc	r21, 7
 ad4:	90 58       	subi	r25, 0x80	; 128
 ad6:	44 0f       	add	r20, r20
 ad8:	55 1f       	adc	r21, r21
 ada:	59 f0       	breq	.+22     	; 0xaf2 <__fp_splitA+0x10>
 adc:	5f 3f       	cpi	r21, 0xFF	; 255
 ade:	71 f0       	breq	.+28     	; 0xafc <__fp_splitA+0x1a>
 ae0:	47 95       	ror	r20

00000ae2 <__fp_splitA>:
 ae2:	88 0f       	add	r24, r24
 ae4:	97 fb       	bst	r25, 7
 ae6:	99 1f       	adc	r25, r25
 ae8:	61 f0       	breq	.+24     	; 0xb02 <__fp_splitA+0x20>
 aea:	9f 3f       	cpi	r25, 0xFF	; 255
 aec:	79 f0       	breq	.+30     	; 0xb0c <__fp_splitA+0x2a>
 aee:	87 95       	ror	r24
 af0:	08 95       	ret
 af2:	12 16       	cp	r1, r18
 af4:	13 06       	cpc	r1, r19
 af6:	14 06       	cpc	r1, r20
 af8:	55 1f       	adc	r21, r21
 afa:	f2 cf       	rjmp	.-28     	; 0xae0 <__fp_split3+0xe>
 afc:	46 95       	lsr	r20
 afe:	f1 df       	rcall	.-30     	; 0xae2 <__fp_splitA>
 b00:	08 c0       	rjmp	.+16     	; 0xb12 <__fp_splitA+0x30>
 b02:	16 16       	cp	r1, r22
 b04:	17 06       	cpc	r1, r23
 b06:	18 06       	cpc	r1, r24
 b08:	99 1f       	adc	r25, r25
 b0a:	f1 cf       	rjmp	.-30     	; 0xaee <__fp_splitA+0xc>
 b0c:	86 95       	lsr	r24
 b0e:	71 05       	cpc	r23, r1
 b10:	61 05       	cpc	r22, r1
 b12:	08 94       	sec
 b14:	08 95       	ret

00000b16 <__fp_zero>:
 b16:	e8 94       	clt

00000b18 <__fp_szero>:
 b18:	bb 27       	eor	r27, r27
 b1a:	66 27       	eor	r22, r22
 b1c:	77 27       	eor	r23, r23
 b1e:	cb 01       	movw	r24, r22
 b20:	97 f9       	bld	r25, 7
 b22:	08 95       	ret

00000b24 <__mulsf3>:
 b24:	0a d0       	rcall	.+20     	; 0xb3a <__mulsf3x>
 b26:	c4 cf       	rjmp	.-120    	; 0xab0 <__fp_round>
 b28:	b5 df       	rcall	.-150    	; 0xa94 <__fp_pscA>
 b2a:	28 f0       	brcs	.+10     	; 0xb36 <__mulsf3+0x12>
 b2c:	ba df       	rcall	.-140    	; 0xaa2 <__fp_pscB>
 b2e:	18 f0       	brcs	.+6      	; 0xb36 <__mulsf3+0x12>
 b30:	95 23       	and	r25, r21
 b32:	09 f0       	breq	.+2      	; 0xb36 <__mulsf3+0x12>
 b34:	a6 cf       	rjmp	.-180    	; 0xa82 <__fp_inf>
 b36:	ab cf       	rjmp	.-170    	; 0xa8e <__fp_nan>
 b38:	ef cf       	rjmp	.-34     	; 0xb18 <__fp_szero>

00000b3a <__mulsf3x>:
 b3a:	cb df       	rcall	.-106    	; 0xad2 <__fp_split3>
 b3c:	a8 f3       	brcs	.-22     	; 0xb28 <__mulsf3+0x4>

00000b3e <__mulsf3_pse>:
 b3e:	99 23       	and	r25, r25
 b40:	d9 f3       	breq	.-10     	; 0xb38 <__mulsf3+0x14>
 b42:	55 23       	and	r21, r21
 b44:	c9 f3       	breq	.-14     	; 0xb38 <__mulsf3+0x14>
 b46:	95 0f       	add	r25, r21
 b48:	50 e0       	ldi	r21, 0x00	; 0
 b4a:	55 1f       	adc	r21, r21
 b4c:	aa 27       	eor	r26, r26
 b4e:	ee 27       	eor	r30, r30
 b50:	ff 27       	eor	r31, r31
 b52:	bb 27       	eor	r27, r27
 b54:	00 24       	eor	r0, r0
 b56:	08 94       	sec
 b58:	67 95       	ror	r22
 b5a:	20 f4       	brcc	.+8      	; 0xb64 <__mulsf3_pse+0x26>
 b5c:	e2 0f       	add	r30, r18
 b5e:	f3 1f       	adc	r31, r19
 b60:	b4 1f       	adc	r27, r20
 b62:	0a 1e       	adc	r0, r26
 b64:	22 0f       	add	r18, r18
 b66:	33 1f       	adc	r19, r19
 b68:	44 1f       	adc	r20, r20
 b6a:	aa 1f       	adc	r26, r26
 b6c:	66 95       	lsr	r22
 b6e:	a9 f7       	brne	.-22     	; 0xb5a <__mulsf3_pse+0x1c>
 b70:	77 95       	ror	r23
 b72:	30 f4       	brcc	.+12     	; 0xb80 <__mulsf3_pse+0x42>
 b74:	f3 0f       	add	r31, r19
 b76:	b4 1f       	adc	r27, r20
 b78:	0a 1e       	adc	r0, r26
 b7a:	12 1e       	adc	r1, r18
 b7c:	08 f4       	brcc	.+2      	; 0xb80 <__mulsf3_pse+0x42>
 b7e:	63 95       	inc	r22
 b80:	33 0f       	add	r19, r19
 b82:	44 1f       	adc	r20, r20
 b84:	aa 1f       	adc	r26, r26
 b86:	22 1f       	adc	r18, r18
 b88:	76 95       	lsr	r23
 b8a:	99 f7       	brne	.-26     	; 0xb72 <__mulsf3_pse+0x34>
 b8c:	87 95       	ror	r24
 b8e:	20 f4       	brcc	.+8      	; 0xb98 <__mulsf3_pse+0x5a>
 b90:	b4 0f       	add	r27, r20
 b92:	0a 1e       	adc	r0, r26
 b94:	12 1e       	adc	r1, r18
 b96:	63 1f       	adc	r22, r19
 b98:	44 0f       	add	r20, r20
 b9a:	aa 1f       	adc	r26, r26
 b9c:	22 1f       	adc	r18, r18
 b9e:	33 1f       	adc	r19, r19
 ba0:	86 95       	lsr	r24
 ba2:	a9 f7       	brne	.-22     	; 0xb8e <__mulsf3_pse+0x50>
 ba4:	86 2f       	mov	r24, r22
 ba6:	71 2d       	mov	r23, r1
 ba8:	60 2d       	mov	r22, r0
 baa:	11 24       	eor	r1, r1
 bac:	9f 57       	subi	r25, 0x7F	; 127
 bae:	50 40       	sbci	r21, 0x00	; 0
 bb0:	8a f0       	brmi	.+34     	; 0xbd4 <__mulsf3_pse+0x96>
 bb2:	e1 f0       	breq	.+56     	; 0xbec <__mulsf3_pse+0xae>
 bb4:	88 23       	and	r24, r24
 bb6:	4a f0       	brmi	.+18     	; 0xbca <__mulsf3_pse+0x8c>
 bb8:	ee 0f       	add	r30, r30
 bba:	ff 1f       	adc	r31, r31
 bbc:	bb 1f       	adc	r27, r27
 bbe:	66 1f       	adc	r22, r22
 bc0:	77 1f       	adc	r23, r23
 bc2:	88 1f       	adc	r24, r24
 bc4:	91 50       	subi	r25, 0x01	; 1
 bc6:	50 40       	sbci	r21, 0x00	; 0
 bc8:	a9 f7       	brne	.-22     	; 0xbb4 <__mulsf3_pse+0x76>
 bca:	9e 3f       	cpi	r25, 0xFE	; 254
 bcc:	51 05       	cpc	r21, r1
 bce:	70 f0       	brcs	.+28     	; 0xbec <__mulsf3_pse+0xae>
 bd0:	58 cf       	rjmp	.-336    	; 0xa82 <__fp_inf>
 bd2:	a2 cf       	rjmp	.-188    	; 0xb18 <__fp_szero>
 bd4:	5f 3f       	cpi	r21, 0xFF	; 255
 bd6:	ec f3       	brlt	.-6      	; 0xbd2 <__mulsf3_pse+0x94>
 bd8:	98 3e       	cpi	r25, 0xE8	; 232
 bda:	dc f3       	brlt	.-10     	; 0xbd2 <__mulsf3_pse+0x94>
 bdc:	86 95       	lsr	r24
 bde:	77 95       	ror	r23
 be0:	67 95       	ror	r22
 be2:	b7 95       	ror	r27
 be4:	f7 95       	ror	r31
 be6:	e7 95       	ror	r30
 be8:	9f 5f       	subi	r25, 0xFF	; 255
 bea:	c1 f7       	brne	.-16     	; 0xbdc <__mulsf3_pse+0x9e>
 bec:	fe 2b       	or	r31, r30
 bee:	88 0f       	add	r24, r24
 bf0:	91 1d       	adc	r25, r1
 bf2:	96 95       	lsr	r25
 bf4:	87 95       	ror	r24
 bf6:	97 f9       	bld	r25, 7
 bf8:	08 95       	ret

00000bfa <__mulhi3>:
 bfa:	00 24       	eor	r0, r0
 bfc:	55 27       	eor	r21, r21
 bfe:	04 c0       	rjmp	.+8      	; 0xc08 <__mulhi3+0xe>
 c00:	08 0e       	add	r0, r24
 c02:	59 1f       	adc	r21, r25
 c04:	88 0f       	add	r24, r24
 c06:	99 1f       	adc	r25, r25
 c08:	00 97       	sbiw	r24, 0x00	; 0
 c0a:	29 f0       	breq	.+10     	; 0xc16 <__mulhi3+0x1c>
 c0c:	76 95       	lsr	r23
 c0e:	67 95       	ror	r22
 c10:	b8 f3       	brcs	.-18     	; 0xc00 <__mulhi3+0x6>
 c12:	71 05       	cpc	r23, r1
 c14:	b9 f7       	brne	.-18     	; 0xc04 <__mulhi3+0xa>
 c16:	80 2d       	mov	r24, r0
 c18:	95 2f       	mov	r25, r21
 c1a:	08 95       	ret

00000c1c <__udivmodhi4>:
 c1c:	aa 1b       	sub	r26, r26
 c1e:	bb 1b       	sub	r27, r27
 c20:	51 e1       	ldi	r21, 0x11	; 17
 c22:	07 c0       	rjmp	.+14     	; 0xc32 <__udivmodhi4_ep>

00000c24 <__udivmodhi4_loop>:
 c24:	aa 1f       	adc	r26, r26
 c26:	bb 1f       	adc	r27, r27
 c28:	a6 17       	cp	r26, r22
 c2a:	b7 07       	cpc	r27, r23
 c2c:	10 f0       	brcs	.+4      	; 0xc32 <__udivmodhi4_ep>
 c2e:	a6 1b       	sub	r26, r22
 c30:	b7 0b       	sbc	r27, r23

00000c32 <__udivmodhi4_ep>:
 c32:	88 1f       	adc	r24, r24
 c34:	99 1f       	adc	r25, r25
 c36:	5a 95       	dec	r21
 c38:	a9 f7       	brne	.-22     	; 0xc24 <__udivmodhi4_loop>
 c3a:	80 95       	com	r24
 c3c:	90 95       	com	r25
 c3e:	bc 01       	movw	r22, r24
 c40:	cd 01       	movw	r24, r26
 c42:	08 95       	ret

00000c44 <__divmodsi4>:
 c44:	05 2e       	mov	r0, r21
 c46:	97 fb       	bst	r25, 7
 c48:	16 f4       	brtc	.+4      	; 0xc4e <__divmodsi4+0xa>
 c4a:	00 94       	com	r0
 c4c:	0f d0       	rcall	.+30     	; 0xc6c <__negsi2>
 c4e:	57 fd       	sbrc	r21, 7
 c50:	05 d0       	rcall	.+10     	; 0xc5c <__divmodsi4_neg2>
 c52:	14 d0       	rcall	.+40     	; 0xc7c <__udivmodsi4>
 c54:	07 fc       	sbrc	r0, 7
 c56:	02 d0       	rcall	.+4      	; 0xc5c <__divmodsi4_neg2>
 c58:	46 f4       	brtc	.+16     	; 0xc6a <__divmodsi4_exit>
 c5a:	08 c0       	rjmp	.+16     	; 0xc6c <__negsi2>

00000c5c <__divmodsi4_neg2>:
 c5c:	50 95       	com	r21
 c5e:	40 95       	com	r20
 c60:	30 95       	com	r19
 c62:	21 95       	neg	r18
 c64:	3f 4f       	sbci	r19, 0xFF	; 255
 c66:	4f 4f       	sbci	r20, 0xFF	; 255
 c68:	5f 4f       	sbci	r21, 0xFF	; 255

00000c6a <__divmodsi4_exit>:
 c6a:	08 95       	ret

00000c6c <__negsi2>:
 c6c:	90 95       	com	r25
 c6e:	80 95       	com	r24
 c70:	70 95       	com	r23
 c72:	61 95       	neg	r22
 c74:	7f 4f       	sbci	r23, 0xFF	; 255
 c76:	8f 4f       	sbci	r24, 0xFF	; 255
 c78:	9f 4f       	sbci	r25, 0xFF	; 255
 c7a:	08 95       	ret

00000c7c <__udivmodsi4>:
 c7c:	a1 e2       	ldi	r26, 0x21	; 33
 c7e:	1a 2e       	mov	r1, r26
 c80:	aa 1b       	sub	r26, r26
 c82:	bb 1b       	sub	r27, r27
 c84:	fd 01       	movw	r30, r26
 c86:	0d c0       	rjmp	.+26     	; 0xca2 <__udivmodsi4_ep>

00000c88 <__udivmodsi4_loop>:
 c88:	aa 1f       	adc	r26, r26
 c8a:	bb 1f       	adc	r27, r27
 c8c:	ee 1f       	adc	r30, r30
 c8e:	ff 1f       	adc	r31, r31
 c90:	a2 17       	cp	r26, r18
 c92:	b3 07       	cpc	r27, r19
 c94:	e4 07       	cpc	r30, r20
 c96:	f5 07       	cpc	r31, r21
 c98:	20 f0       	brcs	.+8      	; 0xca2 <__udivmodsi4_ep>
 c9a:	a2 1b       	sub	r26, r18
 c9c:	b3 0b       	sbc	r27, r19
 c9e:	e4 0b       	sbc	r30, r20
 ca0:	f5 0b       	sbc	r31, r21

00000ca2 <__udivmodsi4_ep>:
 ca2:	66 1f       	adc	r22, r22
 ca4:	77 1f       	adc	r23, r23
 ca6:	88 1f       	adc	r24, r24
 ca8:	99 1f       	adc	r25, r25
 caa:	1a 94       	dec	r1
 cac:	69 f7       	brne	.-38     	; 0xc88 <__udivmodsi4_loop>
 cae:	60 95       	com	r22
 cb0:	70 95       	com	r23
 cb2:	80 95       	com	r24
 cb4:	90 95       	com	r25
 cb6:	9b 01       	movw	r18, r22
 cb8:	ac 01       	movw	r20, r24
 cba:	bd 01       	movw	r22, r26
 cbc:	cf 01       	movw	r24, r30
 cbe:	08 95       	ret

00000cc0 <_exit>:
 cc0:	f8 94       	cli

00000cc2 <__stop_program>:
 cc2:	ff cf       	rjmp	.-2      	; 0xcc2 <__stop_program>
